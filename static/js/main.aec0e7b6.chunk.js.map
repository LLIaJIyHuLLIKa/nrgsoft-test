{"version":3,"sources":["app/slices/postsSlice.js","components/Sections/SectionItem.js","components/Sections/Sections.js","components/Posts/Posts.js","pages/MainPage.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["postsSlice","createSlice","name","initialState","posts","loading","reducers","addPost","state","payload","push","deletePost","splice","setLoading","setLike","like","actions","loadingFlag","SectionItem","props","onClick","handleButtonClick","sectionTitle","className","Sections","sectionBlocks","map","title","key","Posts","rowCount","length","width","height","rowHeight","rowRenderer","index","style","isScrolling","isVisible","handleLikeClick","handleDelete","href","postObj","data","url","MainPage","postsList","useSelector","dispatch","useDispatch","subreddit","a","axios","get","response","children","randomIndex","Math","floor","random","newPost","console","log","App","oldState","serializedState","sessionStorage","getItem","JSON","parse","error","loadState","store","configureStore","reducer","postsReducer","middleware","thunk","logger","preloadedState","subscribe","stringify","setItem","saveStore","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aec0e7b6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts-slice\",\r\n  initialState: {\r\n    posts: [], // список постов\r\n    loading: false, // флаг загрузки постов\r\n  },\r\n  reducers: {\r\n    addPost: (state, { payload }) => {\r\n      // добавить пост в список\r\n      state.posts.push(payload);\r\n    },\r\n    deletePost: (state, { payload }) => {\r\n      // удаление поста из списка\r\n      state.posts.splice(payload, 1);\r\n    },\r\n    setLoading: (state, { payload }) => {\r\n      // изменение флага загрузки\r\n      state.loading = payload;\r\n    },\r\n    setLike: (state, { payload }) => {\r\n      // изменение лайка\r\n      state.posts[payload].like =\r\n        (state.posts[payload].like === false) ? true : false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addPost, deletePost, setLoading, setLike } = postsSlice.actions;\r\nexport const posts = (state) => state.posts;\r\nexport const loadingFlag = (state) => state.loading;\r\nexport default postsSlice.reducer;\r\n\r\nexport function fetchPosts(subreddit) {\r\n  // получение постов из Реддита\r\n  return async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://www.reddit.com/r/${subreddit}.json`\r\n      );\r\n      const data = response.data.data.children;\r\n\r\n      const randomIndex = Math.floor(Math.random() * data.length); // выбираем случайный пост\r\n      const newPost = {\r\n        like: false,\r\n        postObj: data[randomIndex],\r\n      };\r\n\r\n      dispatch(addPost(newPost));  // добавляем его в список\r\n      dispatch(setLoading(false));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SectionItem = (props) => {\r\n    return (\r\n        <div onClick={() => props.handleButtonClick(props.sectionTitle)} className=\"sections__item\">\r\n            <span>{props.sectionTitle}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nSectionItem.propTypes = {\r\n    sectionTitle: PropTypes.string,\r\n    handleButtonClick: PropTypes.func\r\n}\r\n\r\nexport default SectionItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SectionItem from \"./SectionItem\";\r\nimport \"./Sections.scss\";\r\n\r\nconst Sections = (props) => {\r\n  const titles = [\"Frontend\", \"ReactJS\", \"VueJS\", \"Angular\"];\r\n  const sectionBlocks = titles.map((title) => (\r\n    <SectionItem key={title} sectionTitle={title} handleButtonClick={props.handleButtonClick} />\r\n  ));\r\n\r\n  return <div className=\"sections\">{sectionBlocks}</div>;\r\n};\r\n\r\nSections.propTypes = {\r\n  handleButtonClick: PropTypes.func\r\n}\r\n\r\nexport default Sections;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { List } from \"react-virtualized\";\r\nimport \"./Posts.scss\";\r\n\r\nconst Posts = (props) => {\r\n  const rowRenderer = ({ key, index, isScrolling, isVisible, style }) => {\r\n    return (\r\n      <div key={key} style={style} className=\"posts__item\">\r\n        <i\r\n          onClick={() => props.handleLikeClick(index)}\r\n          className={`fa fa-heart ${\r\n            props.posts[index].like ? \"red-heart\" : \"\"\r\n          }`}\r\n        ></i>\r\n        <i\r\n          onClick={() => props.handleDelete(index)}\r\n          className=\"fa fa-trash\"\r\n        ></i>\r\n        <a href={props.posts[index].postObj.data.url}>{props.posts[index].postObj.data.title}</a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <List\r\n        rowCount={props.posts.length}\r\n        width={1200}\r\n        height={350}\r\n        rowHeight={50}\r\n        rowRenderer={rowRenderer}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nPosts.propTypes = {\r\n  posts: PropTypes.array,\r\n  handleDelete: PropTypes.func,\r\n  handleLikeClick: PropTypes.func,\r\n};\r\n\r\nexport default Posts;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deletePost,\r\n  setLike,\r\n  fetchPosts,\r\n  posts,\r\n  loadingFlag,\r\n} from \"../app/slices/postsSlice\";\r\nimport Sections from \"../components/Sections/Sections\";\r\nimport Posts from \"../components/Posts/Posts\";\r\nimport './MainPage.scss';\r\n\r\nconst MainPage = () => {\r\n  const postsList = useSelector(posts);\r\n  const loading = useSelector(loadingFlag);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleButtonClick = (sectionTitle) => {\r\n    // получение постов\r\n    dispatch(fetchPosts(sectionTitle));\r\n  };\r\n  const handleLikeClick = (index) => {\r\n    // поставить / снять лайк\r\n    dispatch(setLike(index));\r\n  };\r\n  const handleDelete = (index) => {\r\n    // удаление поста\r\n    dispatch(deletePost(index));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Sections handleButtonClick={handleButtonClick} />\r\n      {postsList.length > 0 && (\r\n        <Posts\r\n          posts={postsList}\r\n          handleDelete={handleDelete}\r\n          handleLikeClick={handleLikeClick}\r\n        />\r\n      )}\r\n      {loading && (\r\n        <div className=\"loading\">\r\n          <i className=\"fa fa-spinner\"></i>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport MainPage from './pages/MainPage';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport postsReducer from './slices/postsSlice';\r\n\r\nconst saveStore = (state) => {\r\n  // сохранение хранилища\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    \r\n    sessionStorage.setItem('appState', serializedState);\r\n  } catch(error) {\r\n    console.log(error);\r\n  }\r\n};\r\nconst loadState = () => {\r\n  // загрузка старого хранилища\r\n  try {\r\n    const serializedState = sessionStorage.getItem('appState');\r\n\r\n    if(!serializedState) return undefined;\r\n\r\n    return JSON.parse(serializedState);\r\n  } catch(error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst oldState = loadState(); // старое хранилище\r\n\r\nconst store = configureStore({\r\n  reducer: postsReducer,\r\n  middleware: [thunk, logger],\r\n  preloadedState: oldState\r\n});\r\n\r\nstore.subscribe(() => {\r\n  saveStore(store.getState());\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}